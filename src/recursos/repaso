import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class ParkingApp {
    private static final double TARIFA_RESIDENTE = 0.002; // Tarifa por minuto para residentes
    private static final double TARIFA_NO_RESIDENTE = 0.02; // Tarifa por minuto para no residentes

    private List<String> vehiculosOficiales;
    private List<String> vehiculosResidentes;
    private Map<String, Estancia> estanciasOficiales;

    public ParkingApp() {
        vehiculosOficiales = new ArrayList<>();
        vehiculosResidentes = new ArrayList<>();
        estanciasOficiales = new HashMap<>();
    }

    public void registrarEntrada(String matricula) {
        if (esVehiculoOficial(matricula)) {
            // Registrar entrada de vehículo oficial
            estanciasOficiales.put(matricula, new Estancia());
            System.out.println("Entrada registrada para el vehículo oficial con matrícula " + matricula);
        } else if (esVehiculoResidente(matricula)) {
            // No es necesario registrar entrada para vehículos residentes
            System.out.println("El vehículo residente con matrícula " + matricula + " ha entrado al aparcamiento.");
        } else {
            // Vehículo no registrado
            System.out.println("El vehículo con matrícula " + matricula + " no está registrado en el sistema.");
        }
    }

    public void registrarSalida(String matricula) {
        if (esVehiculoOficial(matricula)) {
            // Registrar salida de vehículo oficial
            Estancia estancia = estanciasOficiales.get(matricula);
            if (estancia != null) {
                estancia.registrarSalida();
                estanciasOficiales.remove(matricula);
                System.out.println("Salida registrada para el vehículo oficial con matrícula " + matricula);
            } else {
                System.out.println("No se encontró una estancia registrada para el vehículo oficial con matrícula " + matricula);
            }
        } else if (esVehiculoResidente(matricula)) {
            // Calcular importe a pagar para vehículo residente
            double importe = calcularImporteResidente(matricula);
            System.out.println("El vehículo residente con matrícula " + matricula + " ha salido del aparcamiento.");
            System.out.println("Importe a pagar: " + importe + "€");
        } else {
            // Vehículo no registrado
            System.out.println("El vehículo con matrícula " + matricula + " no está registrado en el sistema.");
        }
    }

    public void darDeAltaVehiculoOficial(String matricula) {
        vehiculosOficiales.add(matricula);
        System.out.println("Vehículo oficial con matrícula " + matricula + " dado de alta.");
    }

    public void darDeAltaVehiculoResidente(String matricula) {
        vehiculosResidentes.add(matricula);
        System.out.println("Vehículo residente con matrícula " + matricula + " dado de alta.");
    }

    public void comienzaMes() {
        estanciasOficiales.clear();
        System.out.println("Se han eliminado las estancias registradas de los vehículos oficiales.");
    }

    public void generarInformePagosResidentes(String nombreArchivo) {
        // Generar informe de pagos de residentes en el archivo especificado
        // con el formato: Matrícula | Tiempo estacionado (min.) | Cantidad a pagar
        // Puedes implementar esto según tus necesidades específicas
        System.out.println("Se ha generado el informe de pagos de residentes en el archivo " + nombreArchivo);
    }

    private boolean esVehiculoOficial(String matricula) {
        return vehiculosOficiales.contains(matricula);
    }

    private boolean esVehiculoResidente(String matricula) {
        return vehiculosResidentes.contains(matricula);
    }

    private double calcularImporteResidente(String matricula) {
        Estancia estancia = new Estancia();
        double tiempoEstacionado = estancia.calcularDuracion();
        return tiempoEstacionado * TARIFA_RESIDENTE;
    }

    private static class Estancia {
        private long horaEntrada;
        private long horaSalida;

        public Estancia() {
            horaEntrada = System.currentTimeMillis();
        }

        public void registrarSalida() {
            horaSalida = System.currentTimeMillis();
        }

        public double calcularDuracion() {
            long duracionMillis = horaSalida - horaEntrada;
            long duracionMinutos = duracionMillis / (60 * 1000); // Convertir a minutos
            return duracionMinutos;
        }
    }

    public static void main(String[] args) {
        ParkingApp parkingApp = new ParkingApp();
        Scanner scanner = new Scanner(System.in);
        boolean salir = false;

        while (!salir) {
            System.out.println();
            System.out.println("***** MENÚ *****");
            System.out.println("1. Registrar entrada");
            System.out.println("2. Registrar salida");
            System.out.println("3. Dar de alta vehículo oficial");
            System.out.println("4. Dar de alta vehículo de residente");
            System.out.println("5. Comienza mes");
            System.out.println("6. Generar informe de pagos de residentes");
            System.out.println("7. Salir");
            System.out.print("Elige una opción: ");
            int opcion = scanner.nextInt();

            switch (opcion) {
                case 1:
                    System.out.print("Introduce la matrícula del vehículo que entra: ");
                    String matriculaEntrada = scanner.next();
                    parkingApp.registrarEntrada(matriculaEntrada);
                    break;
                case 2:
                    System.out.print("Introduce la matrícula del vehículo que sale: ");
                    String matriculaSalida = scanner.next();
                    parkingApp.registrarSalida(matriculaSalida);
                    break;
                case 3:
                    System.out.print("Introduce la matrícula del vehículo oficial: ");
                    String matriculaOficial = scanner.next();
                    parkingApp.darDeAltaVehiculoOficial(matriculaOficial);
                    break;
                case 4:
                    System.out.print("Introduce la matrícula del vehículo de residente: ");
                    String matriculaResidente = scanner.next();
                    parkingApp.darDeAltaVehiculoResidente(matriculaResidente);
                    break;
                case 5:
                    parkingApp.comienzaMes();
                    break;
                case 6:
                    System.out.print("Introduce el nombre del archivo paragenerar el informe de pagos de residentes: ");
                    String nombreArchivo = scanner.next();
                    parkingApp.generarInformePagosResidentes(nombreArchivo);
                    break;
                case 7:
                    salir = true;
                    break;
                default:
                    System.out.println("Opción inválida. Por favor, elige una opción válida.");
            }
        }

        scanner.close();
        System.out.println("¡Hasta luego!");
    }
}
